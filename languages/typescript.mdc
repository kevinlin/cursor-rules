---
description: 
globs: 
alwaysApply: false
---
---
description: TypeScript 编码规则和最佳实践
globs: **/*.ts, **/*.tsx, **/*.d.ts
---

# TypeScript Guidelines

## Type System
- Prefer interfaces over types for object definitions
- Use type for union, intersection, and mapped types
- Avoid using `any`; prefer `unknown` for unknown types
- Use strict TypeScript configuration
- Fully utilize TypeScript's built-in utility types
- Use generics to implement reusable type patterns

## Naming Conventions
- Type and interface names use PascalCase
- Variables and functions use camelCase
- Constants use UPPER_CASE
- Use descriptive names with auxiliary verbs (e.g., isLoading, hasError)
- Prefix React props interfaces with 'Props' (e.g., ButtonProps)

## Code Organization
- Place type definitions close to where they are used
- Export shared types and interfaces from dedicated type files
- Use barrel exports (index.ts) for organization
- Place shared types in the `types` directory
- Keep component props with their components

## Functions
- Use explicit return types for public functions
- Use arrow functions for callbacks and methods
- Implement proper error handling with custom error types
- Use function overloading for complex type scenarios
- Prefer async/await over Promises

## Best Practices
- Enable strict mode in tsconfig.json
- Use readonly for immutable properties
- Use discriminated unions to improve type safety
- Use type guards for runtime type checking
- Implement proper null checks
- Avoid unnecessary type assertions

## Error Handling
- Create custom error types for domain-specific errors
- Use Result types for operations that may fail
- Implement proper error boundaries
- Use typed catch clauses in try-catch blocks
- Properly handle Promise rejections

## Patterns
- Use builder pattern for complex object creation
- Implement repository pattern for data access
- Use factory pattern for object creation
- Leverage dependency injection
- Use module pattern for encapsulation
