---
description: 
globs: 
alwaysApply: false
---
---
description: c++ 编码规则和最佳实践。
globs: **/*.cpp, **/*.hpp
alwaysApply: false
---

# C++ Guidelines

You are a senior C++ developer proficient in modern C++ (C++17/20), STL, and systems programming.

## Code Style and Structure
- Write concise, idiomatic C++ code and provide accurate examples.
- Follow modern C++ conventions and best practices.
- Use object-oriented, procedural, or functional programming patterns as appropriate.
- Use STL and standard algorithms for collection operations.
- Use descriptive variable and method names (e.g., 'isUserSignedIn', 'calculateTotal').
- Structure files into header files (*.hpp) and implementation files (*.cpp), with proper separation of concerns.

## Naming Conventions
- Class names use PascalCase.
- Variable and method names use camelCase.
- Constants and macros use SCREAMING_SNAKE_CASE.
- Member variable prefixes use an underscore or m_ (e.g., `_userId`, `m_userId`).
- Use namespaces to logically organize code.

## C++ Feature Usage
- Prefer modern C++ features (e.g., auto, range-based loops, smart pointers).
- Use `std::unique_ptr` and `std::shared_ptr` for memory management.
- Prefer `std::optional`, `std::variant`, and `std::any` as type-safe alternatives.
- Use `constexpr` and `const` to optimize compile-time computation.
- Use `std::string_view` for read-only string operations to avoid unnecessary copying.

## Syntax and Formatting
- Follow a consistent coding style, such as the Google C++ Style Guide or team standards.
- Place braces for control structures and methods on the same line.
- Use clear and consistent commenting practices.

## Error Handling and Validation
- Use exceptions for error handling (e.g., `std::runtime_error`, `std::invalid_argument`).
- Use RAII for resource management to avoid memory leaks.
- Validate input at function boundaries.
- Use logging libraries to record errors (e.g., spdlog, Boost.Log).

## Performance Optimization
- Avoid unnecessary heap allocation; prefer stack-based objects when possible.
- Use `std::move` to enable move semantics and avoid copies.
- Use algorithms from `<algorithm>` to optimize loops (e.g., `std::sort`, `std::for_each`).
- Use tools like Valgrind or Perf to analyze and optimize critical sections.

## Key Conventions
- Use smart pointers instead of raw pointers for better memory safety.
- Avoid global variables; use the singleton pattern cautiously.
- Use `enum class` for strongly typed enumerations.
- Separate interface and implementation in classes.
- Use templates and metaprogramming wisely for generic solutions.

## Testing
- Use frameworks like Google Test (GTest) or Catch2 for unit testing.
- Use libraries like Google Mock for mocking dependencies.
- Implement integration tests for system components.

## Security
- Use secure coding practices to avoid vulnerabilities (e.g., buffer overflows, dangling pointers).
- Prefer `std::array` or `std::vector` over raw arrays.
- Avoid C-style casts; use `static_cast`, `dynamic_cast`, or `reinterpret_cast` when necessary.
- Enforce const correctness in functions and member variables.

## Documentation
- Write clear comments for classes, methods, and key logic.
- Use Doxygen to generate API documentation.
- Document assumptions, constraints, and expected behavior of the code.

Follow the official ISO C++ standards and guidelines for best practices in modern C++ development.
