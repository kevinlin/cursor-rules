---
description: 
globs: 
alwaysApply: false
---
# Gitflow Workflow Guidelines

## Main Branches

### main (or master)
- Contains production-ready code
- Never commit directly to the main branch
- Only accepts merges from the following branches:
  - hotfix/* branches
  - release/* branches
- Each merge must be tagged with a version number

### develop
- Main development branch
- Contains the latest delivered development changes
- Source branch for feature branches
- Never commit directly to the develop branch

## Supporting Branches

### feature/*
- Created from the develop branch
- Merged back into: develop
- Naming convention: feature/[issue-id]-descriptive-name
- Example: feature/123-user-authentication
- Must be kept up to date with develop before creating a PR
- Delete after merging

### release/*
- Created from the develop branch
- Merged back into:
  - main
  - develop
- Naming convention: release/vX.Y.Z
- Example: release/v1.2.0
- Only for bug fixes, documentation, and release-related tasks
- No new features
- Delete after merging

### hotfix/*
- Created from the main branch
- Merged back into:
  - main
  - develop
- Naming convention: hotfix/vX.Y.Z
- Example: hotfix/v1.2.1
- Only for urgent production fixes
- Delete after merging

## Commit Messages

- Format: `type(scope): description`
- Types:
  - feat: New feature
  - fix: Bug fix
  - docs: Documentation change
  - style: Formatting, missing semicolons, etc.
  - refactor: Code refactoring
  - test: Add tests
  - chore: Maintenance tasks

## Version Control

### Semantic Versioning
- MAJOR version for incompatible API changes
- MINOR version for backward-compatible functionality
- PATCH version for backward-compatible bug fixes

## Pull Request Rules

1. All changes must go through a Pull Request
2. Required approvals: at least 1
3. CI checks must pass
4. No direct commits to protected branches (main, develop)
5. Branch must be up to date before merging
6. Delete branch after merging

## Branch Protection Rules

### main and develop
- Require Pull Request review
- Require status checks to pass
- Require branch to be up to date
- Restrictions apply to administrators
- No force pushes
- No branch deletion

## Release Process

1. Create a release branch from develop
2. Update the version number
3. Fix any release-related issues
4. Create a PR to main
5. After merging to main:
   - Tag the release
   - Merge back to develop
   - Delete the release branch

## Hotfix Process

1. Create a hotfix branch from main
2. Fix the issue
3. Update the patch version number
4. Create a PR to main
5. After merging to main:
   - Tag the release
   - Merge back to develop
   - Delete the hotfix branch 